Основные используемые функции
1. Получение всех коммитов за определенное время:
git log ­­since=YYYY­mm­dd (без включение последнего дня)
git log ­­until=YYYY­mm­dd (с включением последнего дня)
2. Получение списка коммитов определенного автора
git log ­­author="Имя_автора"
3. Получение N последних коммитов
git log ­n N
4. Поиск коммита по регулярному выражению
git log ­­grep="Init"
5. Отмена только что введенных изменений в файл
git checkout ­­ ИМЯ_ФАЙЛА
6. Просмотреть изменение в буфере гита
git diff –staged
7. Просмотреть изменения и подсветить их
git diff ­­color­words ИМЯ_ФАЙЛА
8. Удаление файлов из репозитория
git rm ИМЯ_ФАЙЛА
9. Перемещение файлов
git mv ИМЯ_ФАЙЛА
10. Добавление и одновременный коммит всех файлов
git commit ­am "Текст коммита"
11. Сброс изменений в файле
git checkout ИМЯ_ФАЙЛА
12. Сброс изменений в буфере
git reset HEAD ИМЯ_ФАЙЛА
13. Редактирование последнего коммита
git commit ­­amend ­m "Комментарий к коммиту"
14. Откат к предыдущему коммиту
git reset ­­soft ХЭШ_КОММИТА

git reset ­­mixed ХЭШ_КОММИТА
git reset ­­hard ХЭШ_КОММИТА
15. Добавление файла глобального игнорирования
git config ­­global core.excludefiles ПУТЬ_К ФАЙЛУ
16. Игнорирование файла который лежит в репозитории
1. сначало добавляем файл в .gitignore
2. git rm ­­cached ИМЯ_ФАЙЛА
17. Показать все отслеживаемые файлы в репозитории
git ls­tree HEAD
18. Показать список отслеживаемых файлов в определенной папке определенной ветки
git ls­tree master ИМЯ_ПАПКИ/
19. Список отслеживаемых файлов в определенном коммите
git ls­tree HASH­COMMITA
20. Показать сокращенный вариант логов репозитория
git log ­­oneline –N
21. Показать коммиты в диапазоне от 1­го SHA­1 до 2­го SHA­1
git log 8713cbc..e5dfaf3 –oneline
22. Показ всех изменений, сделанных в файле на определенном коммите
git log ­p HASH­COMMIT index.html
23. Подробный показ изменений в ходе коммита в определенном файле
git show HASH_COMMITA index.html
24. Создание новой ветки
git branch ИМЯ_ВЕТКИ
25. Переключение между ветками
git checkout ИМЯ_ВЕТКИ
26. Создание и одновременное переключение между ветками
git checkout ­b ИМЯ_ВЕТКИ
27. Сравнение веток
git diff ИМЯ_ВЕТКИ1..ИМЯ_ВЕТКИ2
28. Переименование ветки
git branch ­m СТАРОЕ_ИМЯ_ВЕТКИ НОВОЕ_ИМЯ_ВЕТКИ
29. Удаление ветки
git branch ­d ИМЯ_ВЕТКИ
30. Слияние ветки
git merge ИМЯ_ВЕТКИ
31. Обрывание процесса слияния
git merge –abort
32. Добавление удаленного репозитория
git remote add origin URL_репозитория
33. Просмотр списка удаленных репозиториев
git remote –v
34. Удаление удаленного репозитория
git remote rm алиас_репозитория
35. Отправка локального репозитория на github.com
git push ­u АЛИАС_УДАЛЕННОГО_РЕПОЗИТОРИЯ ЛОКАЛЬНАЯ_ВЕТКА
36. Просмотр списка удаленных веток
git branch ­r
git branch ­a # просмотр и локальных и удаленных веток
37. Клонирование репозитория с удаленного сервера
git clone URL_ИЗ_GITHUB [имя_папки в которую_надо_положить_репозиторий]
38. Отправка ветки на удаленный репозиторий
git push ­u АЛИАС_УДАЛЕННОГО_РЕПОЗИТОРИЯ ЛОКАЛЬНАЯ_ВЕТКА
39. Синхронизация удаленного репозитория и локальной версии
git fetch АЛИАС_УДАЛЕННОГО_РЕПОЗИТОРИЯ
40. Объединение удаленной ветки
git merge origin/master
41. fetch + merge
git pull
42. Добавление ветки из удаленного репозитория в локальную версию
git merge ИМЯ_ЛОКАЛЬНОЙ_ВЕТКИ ИМЯ_ВЕТКИ_С_УДАЛЕННОГО_РЕПОЗИТОРИЯ
43. Удаление ветки из удаленного репозитория
git push origin ­­delete ИМЯ_ВЕТКИ
44. Добавление алиасов к командам git
git config ­­global alias.СОКРАЩЕНИЕ_СКОМАНДЫ "КОМАНДА"
45. Посмотреть, кем в последний раз правилась каждая строка файла
git blame ИМЯ_ФАЙЛА